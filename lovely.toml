[manifest]
version = "1.0.0"
dump_lua = true
priority = 0

[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = '''if G.GAME.round_resets.blind == G.P_BLINDS.bl_small then'''
position = 'at'
payload = '''if G.GAME.blind_on_deck == 'Small' then'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = '''G.GAME.round_resets.blind_states.Small = 'Defeated''''
position = 'after'
payload = '''                        elseif G.GAME.blind_on_deck == 'Bonus' then
                            bonus_reward(G.GAME.blind.config.bonus)'''
match_indent = false

[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = '''G.FUNCS.draw_from_hand_to_discard()'''
position = 'before'
payload = '''
if G.GAME.blind:get_type() == 'Bonus' then
    bonus_end_of_round(G.GAME.blind.config.bonus)
end
if G.consumeables then
    for i, j in ipairs(G.consumeables.cards) do
        if (j.config.center.key == "c_bb_sharehold") then
            j.ability.reward.dollars = math.min(j.ability.max_reward, math.floor(pseudorandom(pseudoseed("stocks")) * (j.ability.min_reward + j.ability.max_reward + 1)) - j.ability.min_reward)
            if j.ability.reward.dollars < 0 then
                local balance = "-$" .. tostring(-1 * j.ability.reward.dollars)
                card_eval_status_text(j, 'jokers', nil, nil, nil, {colour = G.C.RED, message = balance})
            else
                local balance = "$" .. tostring(j.ability.reward.dollars)
                card_eval_status_text(j, 'jokers', nil, nil, nil, {colour = G.C.MONEY, message = balance})
            end
        end
    end
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'blind.lua'
pattern = '''elseif self.name == "Big Blind" then'''
position = 'before'
payload = '''elseif self.config.bonus then
    return 'Bonus'
'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'blind.lua'
pattern = 'function Blind:load(blindTable)'
position = 'after'
payload = '''self.config.bonus = blindTable.bonusy
self.config.timing = blindTable.timer or 0

'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'blind.lua'
pattern = 'return blindTable'
position = 'before'
payload = '''blindTable.bonusy = self.config.bonus
blindTable.timer = self.config.timing or 0
    '''
match_indent = true

[[patches]]
[patches.pattern]
target = 'blind.lua'
pattern = 'function Blind:set_blind(blind, reset, silent)'
position = 'after'
payload = '''   if not reset then
        self.config.bonus = nil
    end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = 'if G.FORCE_BOSS then return G.FORCE_BOSS end'
position = 'after'
payload = '''if G.GAME.forced_blinds and G.GAME.forced_blinds[G.GAME.round_resets.ante] then
    local blind = G.GAME.forced_blinds[G.GAME.round_resets.ante]
    G.GAME.forced_blinds[G.GAME.round_resets.ante] = nil
    return blind
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'blind.lua'
pattern = '''function Blind:press_play()'''
position = 'after'
payload = '''   if G.GAME.blind.config.bonus and G.GAME.blind.config.bonus.spectrals then
        G.E_MANAGER:add_event(Event({ func = function()
            local i0 = 1
            while (i0 <= G.GAME.blind.config.bonus.spectrals) do
                local card = create_card('Spectral',G.consumeables, nil, nil, nil, nil, nil, 'nature')
                card:set_edition({negative = true}, true)
                card:add_to_deck()
                G.consumeables:emplace(card)
                i0 = i0 + 1
            end
        return true end })) 
        delay(0.6)
    end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'blind.lua'
pattern = '''_card:juice_up()'''
position = 'at'
payload = '''if (not self.config.bonus) or (not self.config.bonus.flip_jokers) then _card:juice_up() end'''
match_indent = true
overwrite = true

[[patches]]
[patches.pattern]
target = 'blind.lua'
pattern = '''if self.name == "Small Blind" then'''
position = 'at'
payload = '''if (self.name == "Small Blind") and not (self.config.bonus) then'''
match_indent = true
overwrite = true

[[patches]]
[patches.pattern]
target = 'blind.lua'
pattern = '''function Blind:drawn_to_hand()'''
position = 'after'
payload = '''   if G.GAME.blind.config.bonus and G.GAME.blind.config.bonus.disco then disco_jokers() end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'blind.lua'
pattern = '''G.GAME.last_blind.name = self.name'''
position = 'after'
payload = '''G.GAME.last_blind.key = blind and blind.key or G.GAME.last_blind.key'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''local ret = 0'''
position = 'after'
payload = '''if G.GAME.blind and G.GAME.blind.config and G.GAME.blind.config.bonus and G.GAME.blind.config.bonus.dollars_score then
    ret = ret + G.GAME.blind.config.bonus.dollars_score
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/UI_definitions.lua'
pattern = '''function G.UIDEF.shop()'''
position = 'after'
payload = '''if G.GAME.super_shop then return coolShop() end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/button_callbacks.lua'
pattern = '''G.FUNCS.toggle_shop = function(e)'''
position = 'after'
payload = '''G.GAME.super_shop = nil'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'game.lua'
pattern = '''if not shop_exists then'''
position = 'after'
payload = '''   nosave_shop = handle_special_shop_card(nosave_shop)'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'game.lua'
pattern = '''self.load_shop_vouchers = nil'''
position = 'after'
payload = '''self.load_special_card = nil'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = '''G.shop_jokers.T.w = G.GAME.shop.joker_max*1.01*G.CARD_W'''
position = 'at'
payload = '''if G.GAME.super_shop then
    G.shop_jokers.T.w = math.min(3, G.GAME.shop.joker_max)*1.01*G.CARD_W 
else 
    G.shop_jokers.T.w = G.GAME.shop.joker_max*1.01*G.CARD_W
end'''
match_indent = true
overwrite = true

[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''if self.ability.name == 'Rocket' and G.GAME.blind.boss then'''
position = 'at'
payload = '''if self.ability.name == 'Rocket' and G.GAME.blind.boss and not (G.GAME.blind.config and  G.GAME.blind.config.bonus) then'''
match_indent = true
overwrite = true

[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''if self.ability.name == 'Campfire' and G.GAME.blind.boss and self.ability.x_mult > 1 then'''
position = 'at'
payload = '''if self.ability.name == 'Campfire' and G.GAME.blind.boss and not (G.GAME.blind.config and G.GAME.blind.config.bonus) and self.ability.x_mult > 1 then'''
match_indent = true
overwrite = true

[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''local disableable = G.GAME.blind and ((not G.GAME.blind.disabled) and (G.GAME.blind:get_type() == 'Boss'))'''
position = 'after'
payload = '''disableable = (disableable == true) or (G.GAME.blind and (G.GAME.blind:get_type() == 'Bonus') and G.GAME.blind.boss)'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''if G.GAME.blind and ((not G.GAME.blind.disabled) and (G.GAME.blind:get_type() == 'Boss')) then'''
position = 'at'
payload = '''if G.GAME.blind and ((not G.GAME.blind.disabled) and ((G.GAME.blind:get_type() == 'Boss') or ((G.GAME.blind:get_type() == 'Bonus') and G.GAME.blind.boss))) then'''
match_indent = true
overwrite = true

[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''badges[#badges + 1] = 'negative_playing_card''''
position = 'after'
payload = '''           elseif self.edition.type == 'bb_antichrome' and self.ability.consumeable then
                badges[#badges + 1] = 'loc_antichrome_c_' .. tostring(self.edition.antichrome_rounds)
            elseif self.edition.type == 'bb_antichrome' and (self.ability.set == 'Enhanced' or self.ability.set == 'Default') then
                badges[#badges + 1] = 'loc_antichrome_p_' .. tostring(self.edition.antichrome_rounds)
            elseif self.edition.type == 'bb_antichrome' then
                badges[#badges + 1] = 'loc_antichrome_' .. tostring(self.edition.antichrome_rounds)'''
match_indent = false

[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = '''if v == 'rental' then info_queue[#info_queue+1] = {key = 'rental', set = 'Other', vars = {G.GAME.rental_rate or 1}} end'''
position = 'after'
payload = '''if v == 'loc_antichrome_3' then info_queue[#info_queue+1] = {key = 'antichrome_3', set = 'Other'} end
if v == 'loc_antichrome_2' then info_queue[#info_queue+1] = {key = 'antichrome_2', set = 'Other'} end
if v == 'loc_antichrome_1' then info_queue[#info_queue+1] = {key = 'antichrome_1', set = 'Other'} end
if v == 'loc_antichrome_0' then info_queue[#info_queue+1] = {key = 'antichrome_0', set = 'Other'} end
if v == 'loc_antichrome_c_3' then info_queue[#info_queue+1] = {key = 'antichrome_c_3', set = 'Other'} end
if v == 'loc_antichrome_c_2' then info_queue[#info_queue+1] = {key = 'antichrome_c_2', set = 'Other'} end
if v == 'loc_antichrome_c_1' then info_queue[#info_queue+1] = {key = 'antichrome_c_1', set = 'Other'} end
if v == 'loc_antichrome_c_0' then info_queue[#info_queue+1] = {key = 'antichrome_c_0', set = 'Other'} end
if v == 'loc_antichrome_p_3' then info_queue[#info_queue+1] = {key = 'antichrome_p_3', set = 'Other'} end
if v == 'loc_antichrome_p_2' then info_queue[#info_queue+1] = {key = 'antichrome_p_2', set = 'Other'} end
if v == 'loc_antichrome_p_1' then info_queue[#info_queue+1] = {key = 'antichrome_p_1', set = 'Other'} end
if v == 'loc_antichrome_p_0' then info_queue[#info_queue+1] = {key = 'antichrome_p_0', set = 'Other'} end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = '''G.jokers.cards[i]:calculate_perishable()'''
position = 'after'
payload = '''G.jokers.cards[i]:calculate_antichrome()'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/UI_definitions.lua'
pattern = '''pinned_left = G.C.ORANGE,'''
position = 'after'
payload = '''loc_antichrome_3 = G.C.DARK_EDITION,
loc_antichrome_2 = G.C.DARK_EDITION,
loc_antichrome_1 = G.C.DARK_EDITION,
loc_antichrome_0 = G.C.DARK_EDITION,
loc_antichrome_c_3 = G.C.DARK_EDITION,
loc_antichrome_c_2 = G.C.DARK_EDITION,
loc_antichrome_c_1 = G.C.DARK_EDITION,
loc_antichrome_c_0 = G.C.DARK_EDITION,
loc_antichrome_p_3 = G.C.DARK_EDITION,
loc_antichrome_p_2 = G.C.DARK_EDITION,
loc_antichrome_p_1 = G.C.DARK_EDITION,
loc_antichrome_p_0 = G.C.DARK_EDITION,'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = "if not run_info then G.GAME.round_resets.blind_states[G.GAME.blind_on_deck] = 'Select' end"
position = "before"
payload = '''if true then
    G.GAME.blind_on_deck = G.GAME.modifiers.only_boss and 'Boss' or G.GAME.blind_on_deck
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "G.GAME.round_resets.blind_states.Boss = 'Upcoming'"
position = "before"
payload = '''
G.GAME.round_resets.blind_states.Small = G.GAME.modifiers.only_boss and 'Hide' or G.GAME.round_resets.blind_states.Small
G.GAME.round_resets.blind_states.Big = G.GAME.modifiers.only_boss and 'Hide' or G.GAME.round_resets.blind_states.Big'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "G.GAME.round_resets.boss_rerolled = false"
position = "after"
payload = '''
G.GAME.blind_on_deck = G.GAME.modifiers.only_boss and 'Boss' or G.GAME.blind_on_deck'''
match_indent = true

[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "self.GAME.selected_back:apply_to_run()"
position = "before"
payload = '''
if args.challenge and args.challenge.rules.custom[1] and (args.challenge.rules.custom[1].id == 'only_boss') then G.GAME.round_resets.blind_states.Small = 'Hide' end
if args.challenge and args.challenge.rules.custom[1] and (args.challenge.rules.custom[1].id == 'only_boss') then G.GAME.round_resets.blind_states.Big = 'Hide' end
if args.challenge and args.challenge.rules.custom[2] and (args.challenge.rules.custom[2].id == 'more_bonus_blinds') then G.GAME.bonus_rate = 14 end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''if self.area and self.ability.couponed and (self.area == G.shop_jokers or self.area == G.shop_booster) then self.cost = 0 end'''
position = 'after'
payload = '''if self.area and self.ability.reduced_price and (self.area == G.special_card) then self.cost = math.ceil(self.cost * 0.7) end
if self.area and self.ability.couponed and (self.area == G.special_card) then self.cost = 0 end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''local card = copy_card(pseudorandom_element(G.consumeables.cards, pseudoseed('perkeo')), nil)'''
position = 'after'
payload = '''card.ability.no_perkeo = true'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''local card = copy_card(pseudorandom_element(c_pool, pseudoseed('perkeo')), nil)'''
position = 'after'
payload = '''card.ability.no_perkeo = true'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "elseif _c.name == 'Perkeo' then info_queue[#info_queue+1] = {key = 'e_negative_consumable', set = 'Edition', config = {extra = 1}}"
position = "after"
payload = '''info_queue[#info_queue+1] = {key = 'perkeo_note', set = 'Other'}'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''if G.consumeables.cards[1] then'''
position = 'at'
payload = '''if G.GAME.disable_perkeo then
    
elseif G.consumeables.cards[1] then'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "if _c.set == 'Other' then"
position = "before"
payload = '''if card and card.ability and card.ability.no_perkeo then info_queue[#info_queue+1] = {key = 'perkeo_note2', set = 'Other'} end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/button_callbacks.lua'
pattern = '''G.CONTROLLER.locks.toggle_shop = nil'''
position = 'after'
payload = '''G.GAME.disable_perkeo = nil'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = '''config.saved and'''
position = 'after'
payload = '''(G.GAME.bonus_saved) and {n=G.UIT.C, config={padding = 0.05, align = 'cm'}, nodes={
    {n=G.UIT.R, config={align = 'cm'}, nodes={
        {n=G.UIT.O, config={object = DynaText({string = {' '..localize('ph_bonus_pack')..' '}, colours = {G.C.RED}, shadow = true, pop_in = 0, scale = 0.5*scale, silent = true})}}
    }}
}} or config.saved and'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = '''SMODS.saved = false'''
position = 'after'
payload = '''G.GAME.bonus_saved = nil
if game_over and (G.GAME.blind_on_deck == "Bonus") and (#G.playing_cards > 0) then
    SMODS.saved = true
    G.GAME.bonus_saved = true
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = '''if total_cashout_rows > 7 then'''
position = 'before'
payload = '''::skip_cashing_out2::'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = '''G.GAME.selected_back:trigger_effect({context = 'eval'})'''
position = 'after'
payload = '''if G.GAME.bonus_saved then
    goto skip_cashing_out
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = '''local i = 0'''
position = 'at'
payload = '''::skip_cashing_out::
local i = 0
if G.GAME.bonus_saved then
    goto skip_cashing_out2
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/button_callbacks.lua'
pattern = '''G.STATE = G.STATES.SHOP'''
position = 'before'
payload = '''if G.GAME.bonus_saved then
    G.STATE = G.STATES.BLIND_SELECT
else'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/button_callbacks.lua'
pattern = '''G.STATE = G.STATES.SHOP'''
position = 'after'
payload = '''end'''
match_indent = true